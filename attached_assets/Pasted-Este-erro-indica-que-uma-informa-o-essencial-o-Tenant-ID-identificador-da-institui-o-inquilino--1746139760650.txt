Este erro indica que uma informação essencial, o Tenant ID (identificador da instituição/inquilino), não está sendo fornecida ou reconhecida em algum ponto do processo. No contexto do seu projeto Edunéxia NextGen, que é multi-inquilino (multi-tenant) [5, 73], o Tenant ID (provavelmente o institution_id no seu banco de dados [85, 136]) é crucial para:

Identificar a Instituição Correta: Saber para qual instituição cliente o pagamento deve ser gerado.
Usar as Configurações Corretas: Cada instituição pode ter sua própria chave de API do Asaas [137, 249] e configurações de pagamento. O Tenant ID é necessário para buscar essas configurações específicas.
Garantir a Segurança dos Dados: O sistema usa o Tenant ID para isolar os dados entre as instituições (através de RLS - Row-Level Security) [82, 193-195].
Panorama Geral da Solução (Como Deveria Funcionar)

O fluxo para gerar um link de pagamento Asaas no seu sistema provavelmente envolve os seguintes passos:

Requisição do Frontend: O usuário (provavelmente um administrador ou vendedor no Portal Admin ou Polo) inicia a ação para gerar um pagamento (seja para uma matrícula manual [289, 468] ou outra finalidade). Essa requisição é enviada ao backend.
Autenticação e Identificação do Tenant: O backend (através do API Gateway [23, 356]) recebe a requisição, valida o token de autenticação (JWT do Auth0 [91, 358]) e extrai as informações do usuário, incluindo a qual instituição (Tenant ID / institution_id) ele pertence [208-211].
Busca de Configurações do Tenant: Usando o Tenant ID extraído, o backend consulta o banco de dados (tabela institutions [135-141]) para obter as configurações específicas daquela instituição, principalmente a chave da API do Asaas (asaas_api_key_encrypted [137]).
Chamada à API do Asaas: O backend faz uma chamada à API do Asaas (por exemplo, POST /payments [11, 453]) usando a chave de API específica do tenant para criar a cobrança.
Resposta ao Frontend: A API do Asaas retorna os detalhes da cobrança (incluindo o link de pagamento, se aplicável), e o backend repassa essa informação para o frontend.
Possíveis Causas do Erro {"error":"Tenant ID é obrigatório"}

Dado o fluxo acima, o erro pode estar ocorrendo em alguns pontos:

Frontend não envia identificação: A requisição que sai do seu aplicativo frontend para o backend pode não estar incluindo o token JWT de autenticação no cabeçalho Authorization [358-359], ou o token pode não conter a informação do Tenant ID.
Backend não extrai o Tenant ID: O código no seu backend que recebe a requisição pode não estar extraindo corretamente o Tenant ID do token JWT [208-211].
Falha na lógica de identificação do Tenant: Pode haver um cenário específico (talvez na matrícula manual [389]?) onde a lógica para determinar a qual tenant a operação pertence está falhando ou ausente.
Erro ao buscar configurações: Mesmo que o Tenant ID seja extraído, pode haver um problema ao usá-lo para buscar as configurações da instituição no banco de dados (talvez o ID esteja incorreto ou a consulta falhe). O erro "Tenant ID é obrigatório" pode ser uma consequência de não conseguir encontrar as configurações por causa de um ID inválido ou ausente.
Passos para Diagnosticar e Corrigir o Erro

Vamos seguir um método passo a passo para encontrar a origem do problema:

Passo 1: Verificar a Requisição do Frontend

Objetivo: Garantir que o frontend está enviando as informações necessárias (principalmente o token de autenticação) para o backend.
Como Fazer:
Use as ferramentas de desenvolvedor do seu navegador (geralmente pressionando F12).
Vá para a aba "Network" (ou "Rede").
Execute a ação no seu sistema que dispara a geração do link de pagamento Asaas.
Encontre a requisição que falhou (geralmente marcada em vermelho, com status 500).
Clique nessa requisição e examine a aba "Headers" (ou "Cabeçalhos").
Verifique: Existe um cabeçalho chamado Authorization? O valor dele começa com Bearer seguido por uma longa string (o token JWT)? [359]
Possível Correção (Frontend): Se o cabeçalho Authorization estiver faltando ou incorreto, você precisará ajustar o código do frontend (provavelmente em JavaScript/React/Next.js [42]) para garantir que o token JWT (obtido após o login com Auth0 [14, 91]) seja incluído em todas as requisições para endpoints protegidos do backend. Ferramentas como axios interceptors podem ajudar a fazer isso automaticamente.
Passo 2: Verificar a Extração do Tenant ID no Backend

Objetivo: Garantir que o backend está recebendo o token e extraindo corretamente o Tenant ID dele.
Como Fazer:
Localize o código do backend (Node.js/Deno [46]) responsável por lidar com a requisição de geração de pagamento Asaas.
Verifique o middleware de autenticação que deveria validar o JWT e extrair os dados [359].
Adicione logs temporários (usando console.log ou uma biblioteca de logging) no início da função do controller que gera o pagamento para imprimir:
O cabeçalho Authorization recebido.
Os dados extraídos do JWT após a validação (especialmente o user_id e o tenant_id). Veja o exemplo conceitual em [208-211].
Execute a ação novamente e verifique os logs do seu servidor backend.
Possível Correção (Backend): Se os logs mostrarem que o tenant_id não está sendo extraído corretamente, revise a lógica de validação e decodificação do JWT. Certifique-se de que o Auth0 está configurado para incluir o tenant_id (ou um identificador equivalente, como a organização do usuário [35, 93]) dentro das claims do token JWT.
Passo 3: Verificar a Lógica de Busca das Configurações do Tenant

Objetivo: Garantir que o backend usa o Tenant ID extraído para buscar as configurações corretas da instituição no banco de dados.
Como Fazer:
Ainda no código do backend, após extrair o tenant_id, adicione logs para mostrar o tenant_id que está sendo usado para consultar a tabela institutions.
Verifique a consulta SQL ou o método do ORM (Object-Relational Mapper) que busca os dados da instituição (como a asaas_api_key_encrypted [137]). Certifique-se de que a cláusula WHERE institution_id = ? está presente e usando o valor correto.
Verifique se a consulta retorna os dados esperados para aquele tenant_id.
Possível Correção (Backend): Se a consulta falhar ou não retornar dados, verifique se o tenant_id existe na tabela institutions e se a lógica da consulta está correta. Lembre-se que a chave API do Asaas pode ser nula (NULLABLE [137]), mas a instituição em si deve existir.
Passo 4: Verificar a Chamada à API do Asaas

Objetivo: Garantir que a chamada à API do Asaas está sendo feita com as credenciais corretas.
Como Fazer:
Antes de fazer a chamada para a API do Asaas (e.g., usando axios, Workspace ou uma biblioteca cliente do Asaas), adicione logs para verificar a chave de API que está sendo usada. Ela corresponde à chave da instituição (tenant_id) que você identificou nos passos anteriores?
Possível Correção (Backend): Se a chave de API estiver incorreta ou ausente, corrija a lógica que a busca e a utiliza na chamada para a API do Asaas. Lembre-se que a chave está armazenada criptografada [137] e precisa ser descriptografada antes do uso.
Exemplo Conceitual de Código (Backend Node.js/Express)

JavaScript

// Exemplo conceitual de um controller no backend (simplificado)
// Assumindo uso de Express.js e um middleware de autenticação (authMiddleware)

const express = require('express');
const router = express.Router();
const authMiddleware = require('./middleware/auth'); // Seu middleware que valida JWT e adiciona req.auth
const db = require('./db'); // Seu módulo de acesso ao banco de dados
const asaasService = require('./services/asaas'); // Seu módulo que interage com a API Asaas
const encryptionService = require('./services/encryption'); // Seu módulo para descriptografar

router.post('/generate-payment-link', authMiddleware, async (req, res) => {
  try {
    // --- PASSO 2: Verificar Extração ---
    const tenantId = req.auth?.tenant_id; // Extrai do JWT validado pelo middleware
    const userId = req.auth?.user_id;

    console.log(`[Payment Link] Iniciando para Tenant ID: ${tenantId}, User ID: ${userId}`); // Log

    if (!tenantId) {
      // Se o middleware não conseguiu extrair, retorna erro 400 ou 401
      console.error("[Payment Link] Erro: Tenant ID não encontrado no token JWT.");
      return res.status(401).json({ error: "Tenant ID não encontrado na autenticação." });
    }

    // --- PASSO 3: Verificar Busca de Configurações ---
    console.log(`[Payment Link] Buscando configurações para Tenant ID: ${tenantId}`); // Log
    const institution = await db.query('SELECT asaas_api_key_encrypted, asaas_wallet_id FROM institutions WHERE institution_id = $1', [tenantId]);

    if (!institution.rows || institution.rows.length === 0) {
        console.error(`[Payment Link] Erro: Instituição não encontrada para Tenant ID: ${tenantId}`);
        // Este cenário também pode levar indiretamente ao erro original se não tratado
        return res.status(404).json({ error: "Instituição não encontrada." });
    }

    const encryptedApiKey = institution.rows[0].asaas_api_key_encrypted;
    const walletId = institution.rows[0].asaas_wallet_id; // Ex: [138]

    if (!encryptedApiKey) {
        console.error(`[Payment Link] Erro: Chave API Asaas não configurada para Tenant ID: ${tenantId}`);
        return res.status(400).json({ error: "Configuração de pagamento Asaas incompleta para esta instituição." });
    }

    // Descriptografar a chave API
    const apiKey = encryptionService.decrypt(encryptedApiKey);

    // --- PASSO 4: Verificar Chamada à API Asaas ---
    const paymentData = req.body; // Dados do pagamento vindos do frontend

    console.log(`[Payment Link] Gerando cobrança Asaas para Tenant ID: ${tenantId} com dados:`, paymentData); // Log (cuidado para não logar dados sensíveis)

    // Chamar o serviço Asaas com a chave API correta
    const asaasResponse = await asaasService.createPayment(apiKey, {
      customer: paymentData.customerId, // Pode precisar buscar ou criar via API [453]
      billingType: paymentData.billingType, // BOLETO, CREDIT_CARD, PIX [180]
      value: paymentData.value,
      dueDate: paymentData.dueDate,
      description: `Pagamento referente a ${paymentData.description || 'serviço'}`,
      // Outros campos necessários, como split [455]
      // split: [{ walletId: walletId, percentualValue: 10.0 }] // Exemplo de split
    });

    console.log(`[Payment Link] Resposta Asaas recebida para Tenant ID: ${tenantId}`); // Log

    // Retornar o link de pagamento ou outros dados relevantes
    res.status(201).json({
       paymentId: asaasResponse.id, // gateway_charge_id [178, 241]
       invoiceUrl: asaasResponse.invoiceUrl, // Link do boleto/pagamento
       // ... outros dados da resposta Asaas
    });

  } catch (error) {
    console.error(`[Payment Link] Erro GERAL ao gerar link de pagamento para Tenant ID: ${req.auth?.tenant_id}:`, error);
    // Verificar se o erro veio da API Asaas ou do próprio sistema
    if (error.response && error.response.data) {
        console.error("[Payment Link] Erro da API Asaas:", error.response.data);
        // Retornar o erro específico do Asaas, se disponível, pode ser útil
        return res.status(error.response.status || 500).json(error.response.data);
    }
    // O erro {"error":"Tenant ID é obrigatório"} pode ser gerado AQUI se alguma validação interna falhar antes da chamada Asaas
    res.status(500).json({ error: "Erro interno ao gerar link de pagamento.", details: error.message });
  }
});

module.exports = router;
Verificação Final

Depois de aplicar as correções, teste o fluxo de geração de pagamento novamente. Verifique se:

O erro 500 não ocorre mais.
O link de pagamento Asaas é gerado corretamente.
O pagamento aparece na conta Asaas correta (a da instituição/tenant).
Os registros nas tabelas payments [174-183] e enrollments [160-166] (se aplicável) são criados com o institution_id correto.
Lembre-se que este é um processo investigativo. Comece pelo Passo 1 e avance. A localização exata do problema vai depender da sua implementação específica, mas esses passos devem guiá-lo na direção certa.